<?php declare(strict_types = 1);

namespace Vairogs\Extra\Constants;

use Symfony\Component\HttpFoundation\Response;

final class HttpStatusCode
{
    final public const HTTP_ACCEPTED = Response::HTTP_ACCEPTED;
    final public const HTTP_ALREADY_REPORTED = Response::HTTP_ALREADY_REPORTED;
    final public const HTTP_BAD_GATEWAY = Response::HTTP_BAD_GATEWAY;
    final public const HTTP_BAD_REQUEST = Response::HTTP_BAD_REQUEST;
    final public const HTTP_CONFLICT = Response::HTTP_CONFLICT;
    final public const HTTP_CONTINUE = Response::HTTP_CONTINUE;
    final public const HTTP_CREATED = Response::HTTP_CREATED;
    final public const HTTP_EARLY_HINTS = Response::HTTP_EARLY_HINTS;
    final public const HTTP_EXPECTATION_FAILED = Response::HTTP_EXPECTATION_FAILED;
    final public const HTTP_FAILED_DEPENDENCY = Response::HTTP_FAILED_DEPENDENCY;
    final public const HTTP_FORBIDDEN = Response::HTTP_FORBIDDEN;
    final public const HTTP_FOUND = Response::HTTP_FOUND;
    final public const HTTP_GATEWAY_TIMEOUT = Response::HTTP_GATEWAY_TIMEOUT;
    final public const HTTP_GONE = Response::HTTP_GONE;
    final public const HTTP_IM_USED = Response::HTTP_IM_USED;
    final public const HTTP_INSUFFICIENT_STORAGE = Response::HTTP_INSUFFICIENT_STORAGE;
    final public const HTTP_INTERNAL_SERVER_ERROR = Response::HTTP_INTERNAL_SERVER_ERROR;
    final public const HTTP_I_AM_A_TEAPOT = Response::HTTP_I_AM_A_TEAPOT;
    final public const HTTP_LENGTH_REQUIRED = Response::HTTP_LENGTH_REQUIRED;
    final public const HTTP_LOCKED = Response::HTTP_LOCKED;
    final public const HTTP_LOOP_DETECTED = Response::HTTP_LOOP_DETECTED;
    final public const HTTP_METHOD_NOT_ALLOWED = Response::HTTP_METHOD_NOT_ALLOWED;
    final public const HTTP_MISDIRECTED_REQUEST = Response::HTTP_MISDIRECTED_REQUEST;
    final public const HTTP_MOVED_PERMANENTLY = Response::HTTP_MOVED_PERMANENTLY;
    final public const HTTP_MULTIPLE_CHOICES = Response::HTTP_MULTIPLE_CHOICES;
    final public const HTTP_MULTI_STATUS = Response::HTTP_MULTI_STATUS;
    final public const HTTP_NETWORK_AUTHENTICATION_REQUIRED = Response::HTTP_NETWORK_AUTHENTICATION_REQUIRED;
    final public const HTTP_NON_AUTHORITATIVE_INFORMATION = Response::HTTP_NON_AUTHORITATIVE_INFORMATION;
    final public const HTTP_NOT_ACCEPTABLE = Response::HTTP_NOT_ACCEPTABLE;
    final public const HTTP_NOT_EXTENDED = Response::HTTP_NOT_EXTENDED;
    final public const HTTP_NOT_FOUND = Response::HTTP_NOT_FOUND;
    final public const HTTP_NOT_IMPLEMENTED = Response::HTTP_NOT_IMPLEMENTED;
    final public const HTTP_NOT_MODIFIED = Response::HTTP_NOT_MODIFIED;
    final public const HTTP_NO_CONTENT = Response::HTTP_NO_CONTENT;
    final public const HTTP_OK = Response::HTTP_OK;
    final public const HTTP_PARTIAL_CONTENT = Response::HTTP_PARTIAL_CONTENT;
    final public const HTTP_PAYMENT_REQUIRED = Response::HTTP_PAYMENT_REQUIRED;
    final public const HTTP_PERMANENTLY_REDIRECT = Response::HTTP_PERMANENTLY_REDIRECT;
    final public const HTTP_PRECONDITION_FAILED = Response::HTTP_PRECONDITION_FAILED;
    final public const HTTP_PRECONDITION_REQUIRED = Response::HTTP_PRECONDITION_REQUIRED;
    final public const HTTP_PROCESSING = Response::HTTP_PROCESSING;
    final public const HTTP_PROXY_AUTHENTICATION_REQUIRED = Response::HTTP_PROXY_AUTHENTICATION_REQUIRED;
    final public const HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = Response::HTTP_REQUESTED_RANGE_NOT_SATISFIABLE;
    final public const HTTP_REQUEST_ENTITY_TOO_LARGE = Response::HTTP_REQUEST_ENTITY_TOO_LARGE;
    final public const HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = Response::HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;
    final public const HTTP_REQUEST_TIMEOUT = Response::HTTP_REQUEST_TIMEOUT;
    final public const HTTP_REQUEST_URI_TOO_LONG = Response::HTTP_REQUEST_URI_TOO_LONG;
    final public const HTTP_RESERVED = Response::HTTP_RESERVED;
    final public const HTTP_RESET_CONTENT = Response::HTTP_RESET_CONTENT;
    final public const HTTP_SEE_OTHER = Response::HTTP_SEE_OTHER;
    final public const HTTP_SERVICE_UNAVAILABLE = Response::HTTP_SERVICE_UNAVAILABLE;
    final public const HTTP_SWITCHING_PROTOCOLS = Response::HTTP_SWITCHING_PROTOCOLS;
    final public const HTTP_TEMPORARY_REDIRECT = Response::HTTP_TEMPORARY_REDIRECT;
    final public const HTTP_TOO_EARLY = Response::HTTP_TOO_EARLY;
    final public const HTTP_TOO_MANY_REQUESTS = Response::HTTP_TOO_MANY_REQUESTS;
    final public const HTTP_UNAUTHORIZED = Response::HTTP_UNAUTHORIZED;
    final public const HTTP_UNAVAILABLE_FOR_LEGAL_REASONS = Response::HTTP_UNAVAILABLE_FOR_LEGAL_REASONS;
    final public const HTTP_UNPROCESSABLE_ENTITY = Response::HTTP_UNPROCESSABLE_ENTITY;
    final public const HTTP_UNSUPPORTED_MEDIA_TYPE = Response::HTTP_UNSUPPORTED_MEDIA_TYPE;
    final public const HTTP_UPGRADE_REQUIRED = Response::HTTP_UPGRADE_REQUIRED;
    final public const HTTP_USE_PROXY = Response::HTTP_USE_PROXY;
    final public const HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = Response::HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL;
    final public const HTTP_VERSION_NOT_SUPPORTED = Response::HTTP_VERSION_NOT_SUPPORTED;

    final public const HTTP_BANDWIDTH_LIMIT_EXCEEDED = 509;
    final public const HTTP_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS = 450;
    final public const HTTP_CONNECTION_CLOSED_WITHOUT_RESPONSE = 444;
    final public const HTTP_DISCONNECTED_OPERATION = 112;
    final public const HTTP_ENHANCE_YOUR_CALM = 420;
    final public const HTTP_HEURISTIC_EXPIRATION = 113;
    final public const HTTP_INVALID_TOKEN = 498;
    final public const HTTP_MISCELLANEOUS_PERSISTENT_WARNING = 299;
    final public const HTTP_MISCELLANEOUS_WARNING = 199;
    final public const HTTP_NETWORK_CONNECT_TIMEOUT_ERROR = 599;
    final public const HTTP_NETWORK_READ_TIMEOUT_ERROR = 598;
    final public const HTTP_RESPONSE_IS_STALE = 110;
    final public const HTTP_RETRY_WITH = 449;
    final public const HTTP_REVALIDATION_FAILED = 111;
    final public const HTTP_SITE_IS_FROZEN = 530;
    final public const HTTP_SITE_IS_OVERLOADED = 529;
    final public const HTTP_THIS_IS_FINE = 218;
    final public const HTTP_TOKEN_REQUIRED = 499;
    final public const HTTP_TRANSFORMATION_APPLIED = 214;
}
